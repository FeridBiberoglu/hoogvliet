Opdracht: Scraper Hoogvliet 
1) Doel & scope
Bouw een scraper die alle actuele acties/aanbiedingen van Hoogvliet ophaalt en teruggeeft als genormaliseerde JSON-records. Focus op betrouwbaarheid, juiste prijzen en volledige dekking (incl. varianten).
2) Output (één record per product)
Minimaal deze velden (types/regels in haakjes):
id (string, uniek binnen Hoogvliet)


title (string)


description (string of null)


promotion (string of null, bv. “2+1 gratis”)


price_now (string met punt-notatie, bv. "2.99" of null)


price_was (string met punt-notatie of null)


image_url (absolute URL)


source_url (absolute URL naar productdetail)


start_date (ISO‐datum YYYY-MM-DD of null)


end_date (ISO‐datum YYYY-MM-DD of null)


child_products (lijst van dezelfde structuur, maar zonder eigen children)





Validatie/normalisatie:
Prijzen altijd als strings met punt (geen euroteken/spaties).


URLs absoluut en valide.


Tekst: trimmen, meerdere spaties reduceren, HTML verwijderen.


3) Bronnen & onderzoek (door jou te bepalen)
Onderzoek of er een publieke API is (REST/GraphQL) of dat HTML scraping nodig is.


Leg kort vast: endpoints/HTML-structuur, paginatie, rate-limit observaties.


Gebruik alleen publiek toegankelijke gegevens.


4) Functionele eisen
De scraper haalt alle promotieproducten op (incl. paginatie).


Varianten/child-producten worden meegenomen.


Prijzen en promotietekst moeten exact overeenkomen met de site.


Fouttolerant: netwerkfouten/retries, partial results mogelijk met foutmelding.


Uitvoer: één JSON-bestand met alle records (bijv. hoogvliet_promotions.json).


5) Technische randvoorwaarden
Programmeertaal: Python.


I/O asynchroon waar zinvol (requests, paginatie).


Kies zelf tooling (bv. httpx/aiohttp of headless browser als de site JS-rendered is).


Maak configurabele instellingen (basis-URL, timeouts, concurrency, delay).


Respecteer robots/rate-limits; voeg een eenvoudige throttle in.


6) Logging & fouten
Informative logs: start, pagina/offset, aantal gevonden producten, retries, samenvatting.


Bij parse-fouten: product overslaan + waarschuwing met minimale context (geen PII).


Eindrapport: aantal producten, duur (s), aantal fouten.


7) Kwaliteit & performance
Richtlijn: < 60s voor het volledige promotie-overzicht bij normale netwerkcondities.


Geheugenbeslag: vermijd onnodige in-memory duplicatie.


Codekwaliteit: type hints, duidelijke docstrings, leesbare structuur, DRY.


8) Oplevering
Broncode + korte README:


hoe te draaien,


configuratie-opties,


bekende limitaties.


JSON-voorbeeldoutput (5–10 producten) + volledige run-output.


Kort onderzoekdocument (max 1 pagina) met: gekozen aanpak, bron (API/HTML), paginatie, throttling.





9) Acceptatie-criteria (tests)
Uitvoer bevat geldige JSON met exact de velden hierboven.


Minstens 200+ producten (indicatief; vlag uit als de live site minder toont).


Handmatige steekproef (3 producten): titels, prijzen, promoties, URLs kloppen.


Varianten aanwezig voor minimaal 1 product dat varianten heeft.


Geen relatieve URLs, geen eurotekens in prijzen, datums in ISO-formaat.


Zorg dat je tijdens het bouwen actief edge cases identificeert, documenteert en uitlegt hoe je ze afhandelt. Het is belangrijk dat je echt begrijpt wat je doet en niet blind code schrijft. Houd je daarbij aan fundamentele codeprincipes zoals Single Responsibility, DRY, duidelijke type hints, expliciete error handling, en goed gestructureerde logging.

